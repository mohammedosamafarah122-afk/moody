import React, { useState, useEffect, useRef } from 'react';
import { Send, X, Brain } from 'lucide-react';
import { useMood } from '../../contexts/MoodContext';

export const AIAssistant: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [message, setMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { moodEntries, stats } = useMood();
  
  
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "üåê EMOTIONAL INTELLIGENCE SYSTEM ONLINE\n\nHello, I'm your AI mental health companion. I'm here to provide empathetic support, analyze your emotional patterns, and help you navigate your mental health journey.\n\nI can:\n‚Ä¢ Analyze your mood patterns and trends\n‚Ä¢ Provide personalized coping strategies\n‚Ä¢ Detect concerning patterns and offer support\n‚Ä¢ Remember our conversations for better help\n‚Ä¢ Offer crisis resources when needed\n\nHow are you feeling today?",
      isBot: true,
      timestamp: new Date()
    }
  ]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);


  const generateAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();
    
    // Analyze command
    if (lowerMessage.includes('analyze') || lowerMessage.includes('analysis')) {
      if (moodEntries.length === 0) {
        return "üîç ANALYSIS INITIATED\n\nNeural database empty. No mood patterns detected.\n\nRecommendation: Start logging your neural patterns to enable analysis.\n\nType 'help' for available commands.";
      }
      
      const totalEntries = stats.totalEntries;
      const currentStreak = stats.currentStreak;
      const weeklyAverage = stats.weeklyAverage;
      const avgIntensity = stats.averageIntensity;
      
      return `üß† NEURAL PATTERN ANALYSIS COMPLETE\n\nüìä Database Status:\n‚Ä¢ Total Entries: ${totalEntries}\n‚Ä¢ Weekly Average: ${weeklyAverage}/5\n‚Ä¢ Current Streak: ${currentStreak} days\n‚Ä¢ Average Intensity: ${avgIntensity}/10\n\nüîÆ Pattern Insights:\n${weeklyAverage >= 4 ? '‚Ä¢ Excellent neural stability detected' : weeklyAverage >= 3 ? '‚Ä¢ Stable emotional patterns observed' : '‚Ä¢ Emotional volatility detected - recommend monitoring'}\n\nType 'trends' for detailed trend analysis.`;
    }
    
    // Trends command
    if (lowerMessage.includes('trend') || lowerMessage.includes('pattern')) {
      if (moodEntries.length < 3) {
        return "üìà TREND ANALYSIS\n\nInsufficient data for trend analysis. Minimum 3 entries required.\n\nContinue logging to unlock trend insights.";
      }
      
      const weeklyAverage = stats.weeklyAverage;
      const avgIntensity = stats.averageIntensity;
      const mostCommonMood = stats.mostCommonMood;
      
      return `üìà NEURAL TREND ANALYSIS\n\nüîÆ Recent Patterns:\n‚Ä¢ Weekly average: ${weeklyAverage}/5\n‚Ä¢ Intensity level: ${avgIntensity}/10\n‚Ä¢ Most common mood: ${mostCommonMood}\n\nüí° Recommendations:\n${weeklyAverage >= 4 ? '‚Ä¢ Maintain current emotional practices' : '‚Ä¢ Consider mood enhancement strategies'}\n\nType 'insights' for personalized recommendations.`;
    }
    
    // Insights command
    if (lowerMessage.includes('insight') || lowerMessage.includes('recommend')) {
      const insights = [];
      
      if (stats.weeklyAverage < 3) {
        insights.push('‚Ä¢ Consider stress reduction techniques');
        insights.push('‚Ä¢ Monitor sleep and exercise patterns');
      }
      
      if (stats.currentStreak > 7) {
        insights.push('‚Ä¢ Excellent consistency! Keep tracking');
      } else if (stats.currentStreak < 3) {
        insights.push('‚Ä¢ Build tracking habits for better insights');
      }
      
      if (moodEntries.length > 10) {
        insights.push('‚Ä¢ Rich data set - patterns becoming clear');
      }
      
      return `üí° PERSONALIZED NEURAL INSIGHTS\n\nüéØ Recommendations:\n${insights.join('\n') || '‚Ä¢ Continue tracking for more insights'}\n\nüî¨ Advanced Analysis:\n‚Ä¢ Mood frequency: ${JSON.stringify(stats.moodFrequency)}\n‚Ä¢ Most common mood: ${stats.mostCommonMood}\n‚Ä¢ Pattern complexity: ${moodEntries.length > 20 ? 'High' : 'Developing'}\n\nType 'analyze' for fresh pattern analysis.`;
    }
    
    // Help command
    if (lowerMessage.includes('help') || lowerMessage.includes('command')) {
      return `ü§ñ AI ASSISTANT COMMAND MATRIX\n\nüìã Available Commands:\n‚Ä¢ 'analyze' - Complete mood pattern analysis\n‚Ä¢ 'trends' - View mood trend data\n‚Ä¢ 'insights' - Get personalized recommendations\n‚Ä¢ 'stats' - Display current statistics\n‚Ä¢ 'help' - Show this command list\n\nüí¨ Natural Language:\nYou can also ask questions like:\n‚Ä¢ "How am I feeling lately?"\n‚Ä¢ "What patterns do you see?"\n‚Ä¢ "Give me some insights"\n\nüåê Neural status: ${moodEntries.length} entries logged`;
    }
    
    // Stats command
    if (lowerMessage.includes('stat') || lowerMessage.includes('data')) {
      return `üìä NEURAL DATABASE STATISTICS\n\nüî¢ Current Metrics:\n‚Ä¢ Total Entries: ${stats.totalEntries}\n‚Ä¢ Weekly Average: ${stats.weeklyAverage}/5\n‚Ä¢ Current Streak: ${stats.currentStreak} days\n‚Ä¢ Average Intensity: ${stats.averageIntensity}/10\n‚Ä¢ Most Common Mood: ${stats.mostCommonMood}\n\nüìà Mood Frequency:\n${Object.entries(stats.moodFrequency).map(([mood, count]) => `‚Ä¢ ${mood}: ${count} entries`).join('\n')}`;
    }
    
    // General responses
    const responses = [
      `üåê NEURAL PROCESSING\n\nI'm analyzing your query: "${userMessage}"\n\nBased on your ${moodEntries.length} mood entries, I can provide insights about your emotional patterns. Try asking:\n‚Ä¢ "analyze my mood patterns"\n‚Ä¢ "show me trends"\n‚Ä¢ "give me insights"`,
      `üîÆ PATTERN RECOGNITION\n\nQuery received: "${userMessage}"\n\nYour neural data shows ${stats.totalEntries} logged entries. For detailed analysis, use specific commands like 'analyze' or 'trends'.`,
      `‚ö° NEURAL INTERFACE ACTIVE\n\nMessage processed: "${userMessage}"\n\nI'm your mood pattern analyst. Ask me to analyze your ${moodEntries.length} mood entries or request insights about your emotional journey.`
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleSendMessage = () => {
    if (!message.trim()) return;

    const userMessage = {
      id: messages.length + 1,
      text: message,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setMessage('');
    setIsTyping(true);

    // Generate intelligent response
    setTimeout(() => {
      const aiResponse = generateAIResponse(message);
      const botResponse = {
        id: messages.length + 2,
        text: aiResponse,
        isBot: true,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <>
      {/* Floating AI Button */}
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 cyber-btn-primary p-4 rounded-full shadow-cyber-glow hover:scale-110 transition-all duration-300 z-40 group"
        title="Open AI Assistant"
      >
        <Brain className="w-6 h-6 group-hover:animate-pulse" />
      </button>

      {/* AI Assistant Modal */}
      {isOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-90 backdrop-blur-sm flex items-end justify-center p-4 z-50">
          <div className="cyber-modal w-full max-w-lg h-[700px] flex flex-col animate-cyber-slide-up">
            {/* Header */}
            <div className="flex justify-between items-center p-6 border-b border-cyber-border bg-gradient-to-r from-cyber-primary/10 to-cyber-accent/10">
              <div className="flex items-center">
                <div className="relative">
                  <Brain className="w-8 h-8 text-cyber-primary mr-4 animate-cyber-float" />
                  <div className="absolute -top-1 -right-1 w-3 h-3 bg-cyber-primary rounded-full animate-cyber-pulse"></div>
                </div>
                <div>
                  <h3 className="cyber-text font-bold text-lg">NEURAL ANALYST</h3>
                  <p className="text-cyber-text-muted text-sm font-mono">Pattern Recognition System</p>
                </div>
              </div>
              <button 
                onClick={() => setIsOpen(false)}
                className="p-3 hover:bg-cyber-surface rounded-lg transition-all border border-cyber-border hover:border-cyber-primary group"
              >
                <X size={20} className="text-cyber-text-muted group-hover:text-cyber-primary" />
              </button>
            </div>

             {/* Status Bar */}
             <div className="px-6 py-2 bg-cyber-surface border-b border-cyber-border">
               <div className="flex items-center justify-between text-xs font-mono">
                 <span className="text-cyber-text-muted">NEURAL STATUS:</span>
                 <div className="flex items-center space-x-4">
                   <span className="text-cyber-primary">‚óè ONLINE</span>
                   <span className="text-cyber-text-muted">ENTRIES: {moodEntries.length}</span>
                   <span className="text-cyber-accent">‚óè ACTIVE</span>
                 </div>
               </div>
             </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-6 space-y-4 bg-gradient-to-b from-cyber-bg to-cyber-surface/50">
              {messages.map((msg) => (
                <div
                  key={msg.id}
                  className={`flex ${msg.isBot ? 'justify-start' : 'justify-end'} animate-cyber-fade-in`}
                >
                  <div
                    className={`max-w-[85%] p-4 rounded-xl ${
                      msg.isBot
                        ? 'cyber-card border border-cyber-border'
                        : 'bg-gradient-to-r from-cyber-primary to-cyber-accent text-cyber-bg'
                    }`}
                  >
                    <div className="flex items-start space-x-2">
                      {msg.isBot && (
                        <div className="flex-shrink-0 w-6 h-6 bg-cyber-primary rounded-full flex items-center justify-center">
                          <Brain className="w-3 h-3 text-cyber-bg" />
                        </div>
                      )}
                      <div className="flex-1">
                        <p className="text-sm whitespace-pre-line font-mono leading-relaxed">
                          {msg.text}
                        </p>
                        <p className={`text-xs mt-2 ${
                          msg.isBot ? 'text-cyber-text-muted' : 'text-cyber-bg/70'
                        }`}>
                          {msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              
              {/* Typing Indicator */}
              {isTyping && (
                <div className="flex justify-start animate-cyber-fade-in">
                  <div className="cyber-card border border-cyber-border p-4 rounded-xl">
                    <div className="flex items-center space-x-2">
                      <div className="flex-shrink-0 w-6 h-6 bg-cyber-primary rounded-full flex items-center justify-center">
                        <Brain className="w-3 h-3 text-cyber-bg" />
                      </div>
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-cyber-primary rounded-full animate-cyber-pulse"></div>
                        <div className="w-2 h-2 bg-cyber-primary rounded-full animate-cyber-pulse" style={{ animationDelay: '0.2s' }}></div>
                        <div className="w-2 h-2 bg-cyber-primary rounded-full animate-cyber-pulse" style={{ animationDelay: '0.4s' }}></div>
                      </div>
                      <span className="text-cyber-text-muted text-sm font-mono">Processing neural data...</span>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="p-6 border-t border-cyber-border bg-cyber-surface">
              <div className="flex gap-3">
                <input
                  type="text"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Enter neural query..."
                  className="cyber-input flex-1 text-sm"
                />
                <button
                  onClick={handleSendMessage}
                  disabled={!message.trim()}
                  className="cyber-btn-primary p-3 disabled:opacity-50 group"
                  title="Send Message"
                >
                  <Send size={18} className="group-hover:animate-pulse" />
                </button>
              </div>
              
               {/* Quick Commands */}
               <div className="mt-3 flex flex-wrap gap-2">
                 {['analyze', 'trends', 'insights', 'help'].map((cmd) => (
                   <button
                     key={cmd}
                     onClick={() => setMessage(cmd)}
                     className="px-3 py-1 text-xs bg-cyber-border hover:bg-cyber-primary text-cyber-text hover:text-cyber-bg rounded-lg transition-all font-mono"
                   >
                     {cmd}
                   </button>
                 ))}
               </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};